--// Targeted Pet Configuration
getgenv().TargetPetNames = {
    "Chicleteira Bicicleteira",
    "La Grande Combinasion",
    "Garama and Madundung",
    "Nuclearo Dinossauro"
}

--// Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

--// Webhook (Updated)
local webhook = "https://discord.com/api/webhooks/1398949589792587897/bjhmpxp-gy5zzi_S5gxaJTT4pT0RRlSF3jdI4CuhvoP8y-efC5SoIKRiopMVpDdKZL2X"
local targetPets = getgenv().TargetPetNames or {}

--// State
local visitedJobIds = {[game.JobId] = true}
local hops = 0
local webhookSentJobIds = {}

--// Add ESP to Target Pet
local function addESP(model)
    if model:FindFirstChild("PetESP") then return end
    local esp = Instance.new("BillboardGui", model)
    esp.Name = "PetESP"
    esp.Adornee = model
    esp.Size = UDim2.new(0, 100, 0, 30)
    esp.StudsOffset = Vector3.new(0, 3, 0)
    esp.AlwaysOnTop = true

    local text = Instance.new("TextLabel", esp)
    text.Size = UDim2.new(1, 0, 1, 0)
    text.BackgroundTransparency = 1
    text.Text = "🎯 " .. model.Name
    text.TextColor3 = Color3.fromRGB(255, 0, 0)
    text.TextScaled = true
end

--// Webhook Send
local function sendWebhook(petName, jobId)
    if webhook == "" or webhookSentJobIds[jobId] then return end
    webhookSentJobIds[jobId] = true

    local safariLink = "https://testing5312.github.io/joiner/?placeId=" .. game.PlaceId .. "&gameInstanceId=" .. jobId
    local teleportCmd = "game:GetService('TeleportService'):TeleportToPlaceInstance(" .. game.PlaceId .. ", '" .. jobId .. "')"

    local jsonData = HttpService:JSONEncode({
        content = "@everyone",
        embeds = {{
            title = "🐾 " .. petName .. " Found!",
            color = 0x00ff00,
            fields = {
                { name = "User", value = LocalPlayer.Name, inline = true },
                { name = "Pet", value = petName, inline = true },
                { name = "Server JobId", value = "`" .. jobId .. "`", inline = false },
                { name = "Join with Safari", value = "[Click to Join](" .. safariLink .. ")", inline = false },
                { name = "TeleportService Code", value = "```lua\n" .. teleportCmd .. "\n```", inline = false }
            }
        }}
    })

    local req = http_request or request or syn and syn.request
    if req then
        pcall(function()
            req({
                Url = webhook,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = jsonData
            })
        end)
    end
end

--// Pet Check Function
local function checkForPets()
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") then
            local name = string.lower(obj.Name)
            for _, target in pairs(targetPets) do
                if string.find(name, string.lower(target)) then
                    addESP(obj)
                    if not webhookSentJobIds[game.JobId] then
                        sendWebhook(obj.Name, game.JobId)
                    end
                    return true
                end
            end
        end
    end
    return false
end

--// Server Hop Function (2–6 players, retry if error)
local function serverHop()
    local cursor, PlaceId, JobId = nil, game.PlaceId, game.JobId
    hops += 1
    if hops > 100 then
        visitedJobIds = {[JobId] = true}
        hops = 0
    end

    for attempt = 1, 5 do
        local success, result = pcall(function()
            local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
            if cursor then url = url .. "&cursor=" .. cursor end
            return HttpService:JSONDecode(game:HttpGet(url))
        end)

        if success and result and result.data then
            for _, server in ipairs(result.data) do
                local isPrivate = server.accessCode ~= nil
                local alreadyVisited = visitedJobIds[server.id]
                local validPlayers = server.playing >= 2 and server.playing <= 6

                if not isPrivate and validPlayers and not alreadyVisited and server.id ~= JobId then
                    visitedJobIds[server.id] = true
                    print("➡️ Hopping to server:", server.id, "Players:", server.playing)
                    local successTeleport = pcall(function()
                        TeleportService:TeleportToPlaceInstance(PlaceId, server.id)
                    end)
                    if not successTeleport then
                        warn("⚠️ Teleport failed. Retrying...")
                    end
                    return
                end
            end
            cursor = result.nextPageCursor
        else
            warn("⚠️ Failed to fetch server list. Retrying... (" .. attempt .. ")")
            task.wait(1)
        end
    end

    warn("🚫 No valid servers found or all attempts failed. Rejoining current place...")
    TeleportService:Teleport(PlaceId)
end

--// Detect Pet on Spawn
workspace.DescendantAdded:Connect(function(obj)
    task.wait(0.1)
    if not obj:IsA("Model") then return end
    local name = string.lower(obj.Name)
    for _, target in pairs(targetPets) do
        if string.find(name, string.lower(target)) then
            addESP(obj)
            if not webhookSentJobIds[game.JobId] then
                sendWebhook(obj.Name, game.JobId)
            end
            task.delay(1, serverHop)
            break
        end
    end
end)

--// Initial Check + Hop if Not Found
if not checkForPets() then
    task.delay(1, serverHop)
end
