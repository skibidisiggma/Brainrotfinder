local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local maxTeleportRetries = 125
local visitedJobIds = {}
local placeId = game.PlaceId
local jobId = game.JobId

-- Webhooks
local webhookAURL = "https://discord.com/api/webhooks/1398949589792587897/bjhmpxp-gy5zzi_S5gxaJTT4pT0RRlSF3jdI4CuhvoP8y-efC5SoIKRiopMVpDdKZL2X"
local webhookBURL = "https://discord.com/api/webhooks/1399229152649019452/DMtjxmpnDT0LG0NFxhPNil0NdgAEtpco_DBbKkLd2FOx7_z2CnANyooo-pV3kJEUKBnH"
local webhookCURL = "https://discord.com/api/webhooks/1401266472705331341/WTPImz12QYkLLjEbKwsSzj0thFtPpYFa16ARrYFSSpz03Lso74YUecTq4QgTnauTxzO5"

-- Pet targets
local webhookASet = {
    ["Chicleteira Bicicleteira"] = true,
    ["Dragon Cannelloni"] = true,
    ["La Grande Combinasion"] = true,
    ["Garama and Madundung"] = true,
    ["Nuclearo Dinossauro"] = true,
}

local webhookBSet = {
    ["Los Combinasionas"] = true,
    ["Garama and Mandundung"] = true,
    ["Nuclearo Dinossauro"] = true,
    ["La Grande Combinasion"] = true,
    ["Dragon Canelloni"] = true,
}

-- Webhook C includes all from A and B, only when not in machine
local webhookCSet = {}
for k in pairs(webhookASet) do webhookCSet[k] = true end
for k in pairs(webhookBSet) do webhookCSet[k] = true end

-- Send webhook message
local function sendWebhook(url, content)
    local data = { content = content }
    pcall(function()
        HttpService:PostAsync(url, HttpService:JSONEncode(data), Enum.HttpContentType.ApplicationJson)
    end)
end

-- IN MACHINE detection
local function isInMachine(model)
    for _, child in ipairs(model:GetChildren()) do
        if child:IsA("BillboardGui") then
            local label = child:FindFirstChildWhichIsA("TextLabel")
            if label and label.Text:upper():find("IN MACHINE") then
                return true
            end
        elseif child:IsA("TextLabel") and child.Text:upper():find("IN MACHINE") then
            return true
        end
    end
    return false
end

-- Get teleport script
local function getTeleportScript()
    return string.format([[local ts = game:GetService("TeleportService")
local plr = game.Players.LocalPlayer
ts:TeleportToPlaceInstance(%d, "%s", plr)]], placeId, jobId)
end

-- Send alert if matched
local function alertPet(petName, model)
    local inMachine = isInMachine(model)
    local mention = ""
    local webhookURL = nil

    if inMachine then
        if webhookASet[petName] then
            webhookURL = webhookAURL
            mention = "@everyone\n"
        elseif webhookBSet[petName] then
            webhookURL = webhookBURL
        end
    else
        if webhookCSet[petName] then
            webhookURL = webhookCURL
        end
    end

    if webhookURL then
        local msg = mention ..
            "**Pet Found:** `" .. petName .. "`\n" ..
            "Job ID: `" .. jobId .. "`\n" ..
            "Teleport Script:\n```lua\n" .. getTeleportScript() .. "\n```\n" ..
            "Join Link:\nhttps://testing5312.github.io/joiner/?placeId=" .. placeId .. "&gameInstanceId=" .. jobId
        sendWebhook(webhookURL, msg)
    end
end

-- Extract pet name
local function getPetName(model)
    if model:FindFirstChild("PetName") and model.PetName:IsA("StringValue") then
        return model.PetName.Value
    elseif model:FindFirstChild("NameTag") and model.NameTag:IsA("TextLabel") then
        return model.NameTag.Text
    end
    return model.Name
end

-- Scan current workspace
local function scanPets()
    for _, obj in ipairs(workspace:GetChildren()) do
        if obj:IsA("Model") and obj:FindFirstChild("HumanoidRootPart") then
            local name = getPetName(obj)
            if name then
                name = name:gsub("^%s*(.-)%s*$", "%1")
                alertPet(name, obj)
            end
        end
    end
end

-- Server hop
local function serverHop()
    local tries = 0
    local cursor = nil

    while tries < maxTeleportRetries do
        local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
        if cursor then url = url .. "&cursor=" .. cursor end

        local success, data = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)

        if success and data and data.data then
            for _, server in ipairs(data.data) do
                if server.playing < server.maxPlayers and not server.privateServerId and not visitedJobIds[server.id] then
                    if server.id ~= jobId then
                        visitedJobIds[server.id] = true
                        tries += 1
                        pcall(function()
                            TeleportService:TeleportToPlaceInstance(placeId, server.id, LocalPlayer)
                        end)
                        task.wait(0.1)
                    end
                end
            end
            cursor = data.nextPageCursor
        else
            break
        end
        task.wait(1)
    end

    serverHop()
end

-- Main loop
task.spawn(function()
    while true do
        scanPets()
        task.wait(3)
        serverHop()
    end
end)

-- Dynamic detection
workspace.DescendantAdded:Connect(function(desc)
    if desc:IsA("Model") then
        task.wait(0.02)
        local name = getPetName(desc)
        if name then
            name = name:gsub("^%s*(.-)%s*$", "%1")
            alertPet(name, desc)
        end
    end
end)

print("âœ… Cleaned pet scanner running. No duplicate pets. Every 3s scan + dynamic detection.")
