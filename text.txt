
--[[ ⚔️ Guild: Nyxara Exploits Hub ]]
-- Full Pet Sniper + ESP + Webhook + Server Hop Script (With Teleport Link in Webhook)

--// Targeted Pet Configuration
getgenv().WebhookA_Pets = {
    "Chicleteira Bicicleteira",
    "La Grande Combinasion",
    "Garama and Madundung",
    "Nuclearo Dinossauro",
    "Dragon Cannelloni"
}

getgenv().WebhookB_Pets = {
    "Los Tralaleritos",
    "Graipuss Medussi",
    "Sammyni Spyderini",
    "Torrtuginni Dragonfrutini",
    "Pot Hotspot",
    "Las Tralaleritas"
}

--// Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

--// Webhooks
local webhookA = "https://discord.com/api/webhooks/1398949589792587897/bjhmpxp-gy5zzi_S5gxaJTT4pT0RRlSF3jdI4CuhvoP8y-efC5SoIKRiopMVpDdKZL2X"
local webhookB = "https://discord.com/api/webhooks/1399229152649019452/DMtjxmpnDT0LG0NFxhPNil0NdgAEtpco_DBbKkLd2FOx7_z2CnANyooo-pV3kJEUKBnH"
local visitedJobIds = {[game.JobId] = true}
local detectedPets = {}
local webhookSent = false
local stopHopping = false
local hops = 0
local teleportFails = 0
local maxTeleportRetries = 3
local maxHopsBeforeReset = 100

--// Helper Functions
local function isInsideMachine(pet)
    if pet:FindFirstChild("Label") and string.find(pet.Label.Text:lower(), "in machine") then
        return true
    end
    if pet:FindFirstAncestor("Fuse Machine") or pet:IsDescendantOf(workspace:FindFirstChild("Fuse Machine")) then
        return true
    end
    return false
end

local function addESP(targetModel)
    if targetModel:FindFirstChild("PetESP") then return end
    local Billboard = Instance.new("BillboardGui")
    Billboard.Name = "PetESP"
    Billboard.Adornee = targetModel
    Billboard.Size = UDim2.new(0, 100, 0, 30)
    Billboard.StudsOffset = Vector3.new(0, 3, 0)
    Billboard.AlwaysOnTop = true
    Billboard.Parent = targetModel

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = "🎯 Target Pet"
    Label.TextColor3 = Color3.fromRGB(255, 0, 0)
    Label.TextStrokeTransparency = 0.5
    Label.Font = Enum.Font.SourceSansBold
    Label.TextScaled = true
    Label.Parent = Billboard
end

local function sendWebhook(foundPets, jobId, url)
    local petCounts = {}
    for _, pet in ipairs(foundPets) do
        petCounts[pet] = (petCounts[pet] or 0) + 1
    end

    local formattedPets = {}
    for petName, count in pairs(petCounts) do
        table.insert(formattedPets, count > 1 and petName .. " x" .. count or petName)
    end

    local joinerUrl = "https://testing5312.github.io/joiner/?placeId=" .. tostring(game.PlaceId) .. "&gameInstanceId=" .. jobId
    local jsonData = HttpService:JSONEncode({
        ["embeds"] = {{
            ["title"] = "🐾 Pet(s) Found!",
            ["description"] = "Target pet(s) detected in server.",
            ["fields"] = {
                { ["name"] = "User", ["value"] = LocalPlayer.Name },
                { ["name"] = "Found Pet(s)", ["value"] = table.concat(formattedPets, "\n") },
                { ["name"] = "Server JobId", ["value"] = jobId },
                { ["name"] = "Teleport Script", ["value"] = "game:GetService('TeleportService'):TeleportToPlaceInstance(" .. tostring(game.PlaceId) .. ", '" .. jobId .. "')" },
                { ["name"] = "🌐 Join Server (via redirect)", ["value"] = "[Click here to join](" .. joinerUrl .. ")" },
                { ["name"] = "Time", ["value"] = os.date("%Y-%m-%d %H:%M:%S") }
            },
            ["color"] = 0x00ff00
        }}
    })

    local req = http_request or request or (syn and syn.request)
    if req then
        pcall(function()
            req({
                Url = url,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = jsonData
            })
        end)
    end
end

--// Server Hop
local function serverHop()
    if stopHopping then return end
    task.wait(0.01)
    local cursor = nil
    local PlaceId, JobId = game.PlaceId, game.JobId
    local tries = 0
    hops += 1
    if hops >= maxHopsBeforeReset then
        visitedJobIds = {[JobId] = true}
        hops = 0
    end
    while tries < 10 do
        local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        if cursor then url = url .. "&cursor=" .. cursor end
        local success, response = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)
        if success and response and response.data then
            local servers = {}
            for _, server in ipairs(response.data) do
                if tonumber(server.playing or 0) < 10
                    and server.id ~= JobId
                    and not visitedJobIds[server.id] then
                        table.insert(servers, server.id)
                end
            end
            if #servers > 0 then
                local picked = servers[math.random(1, #servers)]
                TeleportService:TeleportToPlaceInstance(PlaceId, picked)
                return
            end
            cursor = response.nextPageCursor
            if not cursor then
                tries += 1
                cursor = nil
                task.wait(0.01)
            end
        else
            tries += 1
            task.wait(0.01)
        end
    end
    TeleportService:Teleport(PlaceId)
end

--// Pet Check
local function checkForPets()
    local foundA, foundB = {}, {}
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and not obj:FindFirstChild("PetESP") then
            local nameLower = string.lower(obj.Name)
            for _, petA in pairs(getgenv().WebhookA_Pets) do
                if string.find(nameLower, string.lower(petA)) and not isInsideMachine(obj) then
                    table.insert(foundA, obj.Name)
                    addESP(obj)
                    break
                end
            end
            for _, petB in pairs(getgenv().WebhookB_Pets) do
                if string.find(nameLower, string.lower(petB)) and not isInsideMachine(obj) then
                    table.insert(foundB, obj.Name)
                    addESP(obj)
                    break
                end
            end
        end
    end
    return foundA, foundB
end

--// Live Detection
workspace.DescendantAdded:Connect(function(obj)
    task.wait(0.02)
    if obj:IsA("Model") then
        local nameLower = string.lower(obj.Name)
        for _, pet in pairs(getgenv().WebhookA_Pets) do
            if string.find(nameLower, string.lower(pet)) and not obj:FindFirstChild("PetESP") and not isInsideMachine(obj) then
                if not detectedPets[obj.Name] then
                    detectedPets[obj.Name] = true
                    addESP(obj)
                    sendWebhook({obj.Name}, game.JobId, webhookA)
                    serverHop()
                end
                break
            end
        end
        for _, pet in pairs(getgenv().WebhookB_Pets) do
            if string.find(nameLower, string.lower(pet)) and not obj:FindFirstChild("PetESP") and not isInsideMachine(obj) then
                if not detectedPets[obj.Name] then
                    detectedPets[obj.Name] = true
                    addESP(obj)
                    sendWebhook({obj.Name}, game.JobId, webhookB)
                    serverHop()
                end
                break
            end
        end
    end
end)

--// Start
task.wait(5)
local a, b = checkForPets()
if #a > 0 then
    for _, name in ipairs(a) do detectedPets[name] = true end
    sendWebhook(a, game.JobId, webhookA)
    serverHop()
elseif #b > 0 then
    for _, name in ipairs(b) do detectedPets[name] = true end
    sendWebhook(b, game.JobId, webhookB)
    serverHop()
else
    serverHop()
end
